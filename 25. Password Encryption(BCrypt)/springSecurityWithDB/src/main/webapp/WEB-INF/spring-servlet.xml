<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation=	
		"http://www.springframework.org/schema/aop 
    		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
    		http://www.springframework.org/schema/beans 
    		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
    		http://www.springframework.org/schema/context 
    		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
    		http://www.springframework.org/schema/jee 
    		http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
    		http://www.springframework.org/schema/tx 
    		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
    		http://www.springframework.org/schema/util 
			http://www.springframework.org/schema/util/spring-util.xsd
    		http://www.springframework.org/schema/task 
    		http://www.springframework.org/schema/task/spring-task-3.2.xsd
    		http://www.springframework.org/schema/mvc
    		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    		http://www.springframework.org/schema/security
			http://www.springframework.org/schema/security/spring-security-3.2.xsd">	
	
	<context:property-placeholder location="/resources/database.properties" />
	<context:annotation-config />
	
	<context:component-scan base-package="com.soni" />
	<context:component-scan base-package="com.soni.model" />
	<context:component-scan base-package="com.soni.service" />
	<context:component-scan base-package="com.soni.service.user" />
	<context:component-scan base-package="com.soni.service.auth" />
	<context:component-scan base-package="com.soni.service.group" />
	<context:component-scan base-package="com.soni.service.role" />
	
	<aop:aspectj-autoproxy expose-proxy="true" />
	<tx:annotation-driven transaction-manager="transactionManager"/>
	 
	<security:global-method-security secured-annotations="enabled" pre-post-annotations="enabled">
	</security:global-method-security>
	<security:debug/>
	
	<mvc:annotation-driven/>
	
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Configuring tiles view resolver-->
	<bean class="org.springframework.web.servlet.view.tiles2.TilesViewResolver">
		<property name="order" value="0" /> 
	</bean>
	
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- Configuring Internal view resolver -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
        <property name="order" value="1" />
    </bean>
    
    <!-- Lower order, Higher priority. 
    	TilesViewResolver-> InternalViewResolver 
    -->
    
    <!-- Create data source -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${database.driver}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
		<property name="initialSize" value="${database.initialPoolSize}" />
		<property name="maxActive" value="${database.maxActiveSize}" />
	</bean> 
	<!-- Hibernate session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="${packagesToScan}"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg name="strength" value="11" />
	</bean>
	
	<!-- To add exception translation to a template-less Hibernate DAO, we just need to
	add a PersistenceExceptionTranslationPostProcessor bean to the Spring application
	context: -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	<!-- PersistenceExceptionTranslationPostProcessor is a bean post processor which
	adds an advisor to any bean that’s annotated with @Repository so that any platform specific
	exceptions are caught and then rethrown as one of Spring’s unchecked data
	access exceptions. -->
</beans>